Exercise 3: Sorting Customer Orders
1. Understand Sorting Algorithms

Bubble Sort:
Description: A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The process is repeated until the list is sorted.
Time Complexity:
Best Case: O(n)
Average Case: O(n^2)
Worst Case: O(n^2)
Space Complexity: O(1)

Insertion Sort:
Description: Builds the final sorted array one item at a time, with each new element being compared to the already sorted elements and inserted in the correct position.
Time Complexity:
Best Case: O(n)
Average Case: O(n^2)
Worst Case: O(n^2)
Space Complexity: O(1)

Quick Sort:
Description: A divide-and-conquer algorithm that picks a pivot element, partitions the array around the pivot, and recursively sorts the subarrays.
Time Complexity:
Best Case: O(n log n)
Average Case: O(n log n)
Worst Case: O(n^2)
Space Complexity: O(log n)

Merge Sort:
Description: A divide-and-conquer algorithm that divides the array into halves, recursively sorts them, and then merges the sorted halves.
Time Complexity:
Best Case: O(n log n)
Average Case: O(n log n)
Worst Case: O(n log n)
Space Complexity: O(n)

4. Analysis
Compare the Performance (Time Complexity) of Bubble Sort and Quick Sort:

Bubble Sort:
Best Case: O(n) (when the array is already sorted)
Average Case: O(n^2)
Worst Case: O(n^2)
Quick Sort:
Best Case: O(n log n)
Average Case: O(n log n)
Worst Case: O(n^2) (when the pivot selection is poor, e.g., always selecting the smallest or largest element)
Why Quick Sort is Generally Preferred Over Bubble Sort:

Efficiency: Quick Sort is significantly faster than Bubble Sort on average due to its O(n log n) time complexity compared to Bubble Sort's O(n^2).
Scalability: Quick Sort handles larger datasets more efficiently than Bubble Sort.
Optimized for Real-world Data: Quick Sort's average-case performance is excellent, making it suitable for practical applications. Moreover, with good pivot selection (e.g., using the median-of-three method), the worst-case scenario can be mitigated.
In-place Sorting: Quick Sort is an in-place sort (it requires only a small, constant amount of additional storage space), making it memory efficient.
Given these advantages, Quick Sort is generally preferred for sorting tasks in performance-critical applications such as e-commerce platforms.